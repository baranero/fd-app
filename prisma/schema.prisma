// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Firefighters {
  id String @id @default(uuid())
  name String @unique
  vacations Vacations[]
  overhours Overhours[]
  user User[]

    @@map(name: "firefighters")
}

model Overhours {
  id String @id @default(uuid())
  user Firefighters @relation(fields: [userId], references: [id])
  userId String
  amount Int @default(0)
}

model Vacations {
  id String @id @default(uuid())
  user Firefighters @relation(fields: [userId], references: [id])
  userId String
  amount Int @default(0)
  type String

}

model User {
  id            String        @id
  name          String  @unique
  image         String?
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?
  isAdmin   String @default("false")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  firefighter Firefighters @relation(fields: [name], references: [name])
  accounts Account[]
  sessions Session[]

  @@map(name: "users")
}



model Account {
  id                 String        @id
  userId             String       @map(name: "user_id")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  @@index([providerAccountId], name: "providerAccountId")

  @@index([userId], name: "userId")

  @@map(name: "accounts")
}



model Session {
  id           String      @id
  userId       String      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}



model VerificationToken {
  id         String      @id
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}